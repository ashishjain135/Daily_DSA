# Day41SetMat0

## ✅ Problem Name: Set Matrix Zeroes (In-Place, O(1) Space)

---

### 🔷 Problem Statement:

Given an `n x m` matrix, if an element is `0`, **set its entire row and column to 0**, and do it using **constant extra space**.

---

### 🔶 Examples:

### Input 1:

```
lua
CopyEdit
mat = [[1, -1, 1],
       [-1, 0, 1],
       [1, -1, 1]]

```

### Output 1:

```
lua
CopyEdit
[[1, 0, 1],
 [0, 0, 0],
 [1, 0, 1]]

```

### Input 2:

```
lua
CopyEdit
mat = [[0, 1, 2, 0],
       [3, 4, 5, 2],
       [1, 3, 1, 5]]

```

### Output 2:

```
lua
CopyEdit
[[0, 0, 0, 0],
 [0, 4, 5, 0],
 [0, 3, 1, 0]]

```

---

## 🧠 Approach Summary:

### 🔹 Brute Force:

- Use extra row[] and col[] arrays to mark 0s.
- Time: O(n×m), Space: O(n + m)

### 🔹 Optimal (O(1) Space):

Use **first row and first column** of the matrix as flags to mark which rows/cols should be zeroed.

---

## 🔁 Step-by-Step Algorithm:

### Step 1:

Check if the **first row** and **first column** need to be zeroed by scanning them separately.

Use two flags:

```java
java
CopyEdit
boolean firstRowZero = false;
boolean firstColZero = false;

```

---

### Step 2:

Traverse the matrix from index `i=1` and `j=1`.

If `mat[i][j] == 0`, set:

```java
java
CopyEdit
mat[i][0] = 0; // mark the row
mat[0][j] = 0; // mark the column

```

---

### Step 3:

Using above marks, set `mat[i][j] = 0` if either `mat[i][0] == 0` or `mat[0][j] == 0`.

---

### Step 4:

Update the **first row and column** based on the flags `firstRowZero` and `firstColZero`.

---

## ✅ Final Time & Space Complexity:

- **Time**: `O(n × m)`
- **Space**: `O(1)` (in-place)

---

## 📌 Java Code:

```java
java
CopyEdit
class Solution {
    public void setMatrixZeroes(int[][] mat) {
        int n = mat.length, m = mat[0].length;
        boolean firstRowZero = false, firstColZero = false;

        // Step 1: Check first row
        for (int j = 0; j < m; j++) {
            if (mat[0][j] == 0) firstRowZero = true;
        }

        // Step 2: Check first column
        for (int i = 0; i < n; i++) {
            if (mat[i][0] == 0) firstColZero = true;
        }

        // Step 3: Mark rows & cols
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (mat[i][j] == 0) {
                    mat[i][0] = 0;
                    mat[0][j] = 0;
                }
            }
        }

        // Step 4: Update matrix based on markers
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (mat[i][0] == 0 || mat[0][j] == 0) {
                    mat[i][j] = 0;
                }
            }
        }

        // Step 5: Handle first row
        if (firstRowZero) {
            for (int j = 0; j < m; j++) {
                mat[0][j] = 0;
            }
        }

        // Step 6: Handle first column
        if (firstColZero) {
            for (int i = 0; i < n; i++) {
                mat[i][0] = 0;
            }
        }
    }
}

```

---

## ✍️ Key Interview Points:

- Common **Amazon**, **Microsoft**, **Google**, and **Flipkart** problem.
- Focus on:
    
    ✅ in-place tricks
    
    ✅ space optimization
    
    ✅ matrix traversal boundaries
    

---

## 💡 Bonus Tip (Hinglish):

> Jab bhi matrix ke kisi ek element ke basis pe pura row aur column zero karna ho, to us element ki puri location yaad rakhni padti hai.
> 
> 
> Ye extra space na le isliye hum **pehli row aur column** ka use karte hain **“marker”** ki tarah! 💡
>
