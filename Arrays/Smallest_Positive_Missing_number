Smallest Positive Missing Number Problem

Today, I solved a very interesting and popular DSA problem:
👉 Find the smallest positive number missing from an unsorted array, which may include negative numbers too.

🔍 Input Example:
arr = [2, -3, 4, 1, 1, 7]
✅ Output: 3

💡 Approach Used:

Placed elements at their correct indices using a cyclic sort logic.

Time Complexity: O(n)

Space Complexity: O(1)
This approach helped me better understand index mapping and how to efficiently handle missing/duplicate values.

📈 I'm enjoying the process of becoming stronger in DSA by solving such logical problems regularly. Every small step counts! 💪
class Solution {
    // Function to find the smallest positive number missing from the array.
    public int missingNumber(int[] arr) {
        // Your code here
       int n = arr.length;
       for(int i = 0; i<n; i++){
           while(arr[i]>=1 && arr[i]<= n && 
           arr[arr[i]-1] != arr[i]){
               // swap arr[arr[i]-1]
               int indx = arr[i]-1;
               int temp = arr[i];
               arr[i] = arr[indx];
               arr[indx] = temp;
           }
       }
       for(int i = 0; i<n; i++){
           if(arr[i] != i+1){
               return i+1;
           }
       }
       return n+1;
    }
}









