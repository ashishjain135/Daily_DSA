## ✅ Problem Statement

> Given a sorted array of distinct elements that is rotated at an unknown point, find the minimum element in the array.
> 

**Examples:**

- `Input: [5, 6, 1, 2, 3, 4]` → Output: `1`
- `Input: [3, 1, 2]` → Output: `1`
- `Input: [1, 2, 3, 4, 5]` → Output: `1` (already sorted, no rotation)

---

## 🧠 Key Observations

1. A **sorted rotated array** means some portion has been shifted to the end.
2. The array has **two sorted subarrays**, and the **rotation point (pivot)** is where the order breaks.
3. The **minimum element** is at the **rotation point**.

---

## ❌ Brute-force Approach

- **Traverse** the entire array and find the minimum.
- **Time Complexity**: `O(n)`
- ✅ Simple, but inefficient for large arrays.

```java
java
CopyEdit
int min = Integer.MAX_VALUE;
for (int i = 0; i < arr.length; i++) {
    if (arr[i] < min) {
        min = arr[i];
    }
}
return min;

```

---

## ✅ Optimized Approach – Binary Search (`O(log n)`)

Use binary search to find the **point where the array is rotated**, which is the **minimum element**.

---

### 🔁 Step-by-step Binary Search Logic

1. **Initialize**:
    - `low = 0`, `high = n - 1`
2. **Loop** while `low < high`:
    - Find `mid = low + (high - low) / 2`
    - Compare `arr[mid]` with `arr[high]`:
        - If `arr[mid] > arr[high]`:
            
            → Rotation is in the right half → `low = mid + 1`
            
        - Else:
            
            → Rotation is in the left half (or mid is min) → `high = mid`
            
3. **When loop ends**, `low == high`, and that index holds the **minimum** value.

---

### ✅ Code (Without Modifying Array)

```java
java
CopyEdit
class Solution {
    public int findMin(int[] arr) {
        int low = 0;
        int high = arr.length - 1;

        while (low < high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] > arr[high]) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return arr[low];
    }
}

```

---

## 💡 Dry Run Example

Let’s dry run for `arr = [5, 6, 1, 2, 3, 4]`

| Step | low | mid | high | arr[mid] | arr[high] | Action |
| --- | --- | --- | --- | --- | --- | --- |
| 1 | 0 | 2 | 5 | 1 | 4 | high = mid |
| 2 | 0 | 1 | 2 | 6 | 1 | low = mid + 1 |
| 3 | 2 | - | 2 | - | - | Exit loop, return arr[low] = 1 |

---

## 📈 Time and Space Complexity

| Metric | Value |
| --- | --- |
| Time Complexity | `O(log n)` |
| Space Complexity | `O(1)` |

---

## 🚨 Edge Cases

- Array not rotated at all → Output is `arr[0]`
- Only one element → Return that element
- Rotated `n` times (full rotation) → Still works fine
- Already sorted array → Handled naturally

---

## 🏁 Final Notes

- This problem is a **variation of Binary Search**, common in **interviews**.
- Don’t confuse it with finding the **pivot index** – here, we only care about the **minimum value**.
- Practice it with variations like:
    - Arrays with **duplicates** (requires slightly different handling)
    - Finding **index of minimum**, not just value
