✅ Insert and Merge Intervals – Revision Notes
🧠 Problem Summary:
Given a list of non-overlapping intervals sorted by the start time, insert a new interval and merge all overlapping intervals so that the final list remains sorted and non-overlapping.

📥 Input:
intervals[][]: Sorted list of intervals → [[start1, end1], [start2, end2], ...]

newInterval[]: A new interval → [newStart, newEnd]

📤 Output:
A list of merged intervals with the newInterval inserted properly.

🔍 Approach (3-step merge):
🔸 Step 1: Add all intervals that come before newInterval
java
Copy
Edit
while (i < n && intervals[i][1] < newStart)
    add intervals[i++] to result
🔸 Step 2: Merge all overlapping intervals
java
Copy
Edit
while (i < n && intervals[i][0] <= newEnd)
    newStart = min(newStart, intervals[i][0])
    newEnd = max(newEnd, intervals[i][1])
    i++
add merged [newStart, newEnd] to result
🔸 Step 3: Add all intervals that come after newInterval
java
Copy
Edit
while (i < n)
    add intervals[i++] to result
🧪 Example:
Input:

java
Copy
Edit
intervals = [[1,3], [4,5], [6,7], [8,10]]  
newInterval = [5,6]
Output:

java
Copy
Edit
[[1,3], [4,7], [8,10]]
Explanation:

[5,6] overlaps with [4,5] and [6,7]

Merged into [4,7]

📦 Java Code:
java
Copy
Edit
class Solution {
    static ArrayList<int[]> insertInterval(int[][] intervals, int[] newInterval) {
        ArrayList<int[]> result = new ArrayList<>();
        int i = 0;
        int n = intervals.length;

        int ns = newInterval[0];  // newStart
        int ne = newInterval[1];  // newEnd

        // 1. Add intervals before newInterval
        while (i < n && intervals[i][1] < ns) {
            result.add(intervals[i]);
            i++;
        }

        // 2. Merge overlapping intervals
        while (i < n && intervals[i][0] <= ne) {
            ns = Math.min(ns, intervals[i][0]);
            ne = Math.max(ne, intervals[i][1]);
            i++;
        }
        result.add(new int[]{ns, ne});

        // 3. Add remaining intervals
        while (i < n) {
            result.add(intervals[i]);
            i++;
        }

        return result;
    }
}
⏱️ Time Complexity:
O(n) → Single pass through the array

O(n) space for storing result

⚠️ Edge Cases:
intervals is empty

newInterval overlaps all

newInterval fits at the beginning or end

✅ Tips for Interviews:
Emphasize three-phase logic: before → merge → after

Be careful with index boundaries

Use a dry run for tricky overlap cases

