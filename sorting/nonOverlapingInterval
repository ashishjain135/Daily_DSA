# day26 **Non-overlapping Intervals**

### 🔴 Problem Statement:

Given a list of intervals `intervals[i] = [starti, endi]`, remove the **minimum number of intervals** so that the rest of the intervals **do not overlap**.

---

### 🧠 Key Concepts:

- **Greedy Strategy** works best for interval-related optimization problems.
- We need to **maximize** the number of non-overlapping intervals → this will **minimize** the number of removals.

---

### ✅ Algorithm Steps:

1. **Sort the intervals by their end time** (increasing order).
    
    `Arrays.sort(intervals, (a, b) -> Integer.compare(a[1], b[1]))`
    
2. **Initialize**:
    - `prevEnd = intervals[0][1]` → end of the first interval.
    - `count = 0` → number of intervals to remove.
3. **Loop through remaining intervals**:
    - If `current.start < prevEnd` → **overlap detected**, increment `count`.
    - Else → **no overlap**, update `prevEnd = current.end`.
4. **Return `count`** → minimum intervals to remove.

---

### 🧪 Example:

```
text
CopyEdit
Input: intervals = [[1,2], [2,3], [3,4], [1,3]]
Sorted by end: [[1,2], [1,3], [2,3], [3,4]]

Check overlaps:
- [1,2] ✅
- [1,3] ❌ (overlaps with [1,2]) → remove
- [2,3] ✅
- [3,4] ✅

Result: 1 interval removed

```

---

**Edge Cases:**

**🔹 Code:**

```java
class Solution {
    static int minRemoval(int intervals[][]) {
        // code here
      
        int n = intervals.length;
        if(n == 0) return 0;
        
        //step 1 sort according end element
        Arrays.sort(intervals, (a,b) -> Integer.compare(a[1],b[1]));
        
        int prevend = intervals[0][1]; // end of first interval
         int count = 1;
        for(int i = 1; i<n; i++){
            if(intervals[i][0] >= prevend){
                count++;
                // update prevend element 
                prevend = intervals[i][1];
            }
        }
        return n-count; // total - nonOverlapping = minimum removal
    }
}
```

### 💻 Time and Space Complexity:

- **Time:** O(n log n) → for sorting
- **Space:** O(1) → constant extra space

---

### ✅ Final Formula:

To find **min removals**:

**`minRemovals = totalIntervals - maxNonOverlapping`**
