Given an array arr of 0s and 1s. Find and return the length of the longest subarray with equal number of 0s and 1s.

Examples:

Input: arr[] = [1, 0, 1, 1, 1, 0, 0]
Output: 6
Explanation: arr[1...6] is the longest subarray with three 0s and three 1s.
Input: arr[] = [0, 0, 1, 1, 0]
Output: 4
Explnation: arr[0...3] or arr[1...4] is the longest subarray with two 0s and two 1s.
Input: arr[] = [0]
Output: 0
Explnation: There is no subarray with an equal number of 0s and 1s.


🧠 Core Idea:
Convert the array such that:

0 → -1

1 → 1

Now the problem becomes:

"Find the longest subarray with sum = 0"

This transforms the binary balancing problem into a classic Prefix Sum + HashMap pattern.

🧩 Pattern Used:
✅ Prefix Sum + HashMap
Also applies to:

Longest subarray with sum = K

Count of subarrays with sum = 0

Subarray divisible by K

🧾 Step-by-step Approach:
✅ Step 1: Transform the array
Replace every 0 with -1

✅ Step 2: Initialize
java
Copy
Edit
int sum = 0;
HashMap<Integer, Integer> map = new HashMap<>();
int maxLen = 0;
✅ Step 3: Traverse the array
For each element:

Update prefix sum

If sum == 0 → update maxLen = i + 1

If sum seen before → subarray exists, update maxLen = max(maxLen, i - map.get(sum))

Else → store map.put(sum, i) (first occurrence)

🧮 Dry Run Example:
Input:
arr = [1, 0, 1, 1, 0, 0]

After converting 0 → -1:
arr = [1, -1, 1, 1, -1, -1]

Prefix Sum:
[1, 0, 1, 2, 1, 0]

Prefix sum repeats:
sum = 0 at index 1 and 5 → subarray from 0 to 5 is balanced (length = 6)

sum = 1 at index 0 and 4 → subarray from 1 to 4 is balanced (length = 4)

✅ Answer: 6

🧠 Intuition:
sum = 0 from index 0 → i means entire subarray is balanced

Same sum repeating means the subarray in between has net sum 0

📌 Time & Space Complexity:
Metric	Value
Time	O(n)
Space	O(n) (for HashMap)

✅ Final Code (Java):

class Solution {
    public int maxLen(int[] arr) {
        int n = arr.length;

        // Convert 0 to -1
        for (int i = 0; i < n; i++) {
            if (arr[i] == 0) arr[i] = -1;
        }

        HashMap<Integer, Integer> map = new HashMap<>();
        int sum = 0, maxLen = 0;

        for (int i = 0; i < n; i++) {
            sum += arr[i];

            if (sum == 0) {
                maxLen = i + 1;
            } else if (map.containsKey(sum)) {
                maxLen = Math.max(maxLen, i - map.get(sum));
            } else {
                map.put(sum, i);
            }
        }

        return maxLen;
    }
}
🧠 Practice Variants:
🔁 Longest Subarray with Sum = K (positive + negative)

🧮 Count of Subarrays with Sum = K

⚡ Longest Subarray with Equal 0s, 1s and 2s (use 2D prefix diff)

⚔️ Subarray with Equal Positive and Negative Numbers

📝 Summary:
Smart transformation (0 → -1) simplifies problem

HashMap + Prefix Sum = deadly combo for subarray problems

Handles negatives, balances, and prefix tricks elegantly

