Given an array of integers arr[], the task is to find the first equilibrium point in the array.

The equilibrium point in an array is an index (0-based indexing) such that the sum of all elements before that index is the same as the sum of elements after it. Return -1 if no such point exists. 

Examples:

Input: arr[] = [1, 2, 0, 3]
Output: 2 
Explanation: The sum of left of index 2 is 1 + 2 = 3 and sum on right of index 2 is 3.


üß† Concepts Used
Prefix Sum Arrays

Array Traversal

Problem-solving with cumulative patterns

üßÆ Prefix Sum Approach (Your Method)
1. Left Prefix Sum Array (lsum[])
Stores sum of all elements from start up to current index.

java

lps[0] = arr[0];
for (int i = 1; i < n; i++) {
    lps[i] = lps[i - 1] + arr[i];
}
2. Right Prefix Sum Array (rsum[])
Stores sum of all elements from current index to the end.

‚ö†Ô∏è Important: Must loop till i >= 0.

java

rps[n - 1] = arr[n - 1];
for (int i = n - 2; i >= 0; i--) {
    rps[i] = rps[i + 1] + arr[i];
}
3. Comparison Step
Loop over both prefix arrays.

If lsum[i] == rsum[i], return that index.

java

for (int i = 0; i < n; i++) {
    if (lps[i] == rps[i]) return i;
}
4. Return -1 if no match found.
üßë‚Äçüíª Complete Java Code (Prefix Sum Method)
java

class Solution {
    public static int[] lsum(int arr[]) {
        int n = arr.length;
        int[] lps = new int[n];
        lps[0] = arr[0];
        for (int i = 1; i < n; i++) {
            lps[i] = lps[i - 1] + arr[i];
        }
        return lps;
    }

    public static int[] rsum(int arr[]) {
        int n = arr.length;
        int[] rps = new int[n];
        rps[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rps[i] = rps[i + 1] + arr[i];
        }
        return rps;
    }

    public static int findEquilibrium(int arr[]) {
        int[] lps = lsum(arr);
        int[] rps = rsum(arr);
        for (int i = 0; i < arr.length; i++) {
            if (lps[i] == rps[i]) {
                return i;
            }
        }
        return -1;
    }
}
üîç Example Walkthrough
Input:
java
arr = [1, 2, 0, 3]
Step-by-step:
Left Prefix Sum: [1, 3, 3, 6]

Right Prefix Sum: [6, 5, 3, 3]

At i = 2, leftSum = rightSum = 3

‚úÖ Output: 2

üß† Time and Space Complexity
Metric	Value
Time	O(n)
Space	O(n + n) = O(n) (due to two prefix arrays)

üìå Key Points to Remember
Use i >= 0 in the reverse loop for rsum[].

Comparing prefix sums at the same index gives potential equilibrium.

This approach is easy to understand and debug, though not optimal in terms of space.

Alternative: Can solve in O(1) space using total sum and left sum method (for interviews).

‚≠ê Optional: Optimized (No Extra Space)
java

public static int findEquilibrium(int arr[]) {
    int totalSum = 0, leftSum = 0;
    for (int num : arr) totalSum += num;

    for (int i = 0; i < arr.length; i++) {
        if (leftSum == totalSum - leftSum - arr[i]) return i;
        leftSum += arr[i];
    }
    return -1;
}
üß† Use this only when space optimization is required.

