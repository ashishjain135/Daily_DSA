# **CntPrsGivenSum  ->> Count pairs with given sum**

## ✅ Problem Statement:

Given an array `arr[]` and an integer `target`, count the number of **pairs (i, j)** such that:

`arr[i] + arr[j] == target`

and `i < j`.

---

## 🔍 Examples:

### ➤ Example 1:

**Input:** `arr = [1, 5, 7, -1, 5], target = 6`

**Output:** `3`

**Explanation:** Pairs → (1,5), (7,-1), (1,5 again)

### ➤ Example 2:

**Input:** `arr = [1, 1, 1, 1], target = 2`

**Output:** `6`

**Explanation:** 4 elements → C(4,2) = 6 valid pairs of (1,1)

---

## 💡 Naive Approach (Brute Force):

### ➤ Logic:

Use 2 nested loops and check every possible pair.

### ➤ Code (Java):

```java
java
CopyEdit
int countPairs(int arr[], int target) {
    int count = 0;
    for(int i = 0; i < arr.length; i++) {
        for(int j = i + 1; j < arr.length; j++) {
            if(arr[i] + arr[j] == target)
                count++;
        }
    }
    return count;
}

```

### ⏱️ Time Complexity:

- **O(n²)** – not suitable for large arrays

---

## ✅ Optimized Approach (Using HashMap):

### ➤ Key Idea:

- Use a **HashMap** to keep track of the **frequency of elements seen so far**
- For every element `x`, check how many times `target - x` has already occurred

---

### 🧠 Intuition:

Let’s say:

- We encounter element `x`
- Complement needed is `target - x`
- If we’ve already seen this complement, we can form a valid pair

---

### 🔧 Java Code:

```java
java
CopyEdit
import java.util.HashMap;

int countPairs(int arr[], int target) {
    HashMap<Integer, Integer> map = new HashMap<>();
    int count = 0;

    for (int num : arr) {
        int complement = target - num;

        if (map.containsKey(complement)) {
            count += map.get(complement); // add all the complement matches
        }

        // increment current number's frequency
        map.put(num, map.getOrDefault(num, 0) + 1);
    }

    return count;
}

```

---

## 📈 Dry Run Example:

### For arr = [1, 5, 7, -1, 5], target = 6:

| num | complement | map (before) | count |
| --- | --- | --- | --- |
| 1 | 5 | {} | 0 |
| 5 | 1 | {1:1} | 1 |
| 7 | -1 | {1:1, 5:1} | 1 |
| -1 | 7 | {1:1, 5:1, 7:1} | 2 |
| 5 | 1 | {1:1, 5:1, 7:1, -1:1} | 3 |

✅ Final Answer = 3

---

## ⚙️ Time & Space Complexity:

| Metric | Value |
| --- | --- |
| ⏱ Time | O(n) |
| 🧠 Space | O(n) (HashMap) |

---

## ⚠️ Edge Cases to Handle:

- Duplicate elements
- Negative numbers
- No valid pairs → output `0`
- Large arrays → prefer `O(n)` solution

---

## 📌 Notes for Interview:

- Clarify if elements are **distinct** or **can repeat**
- Ask if we need **(i, j) indices** or just **count**
- Be ready to explain why HashMap works better than HashSet here

---

## ✅ Summary:

- **Brute Force** → O(n²), check all pairs
- **Optimized with HashMap** → O(n), track frequency of complements
- Handle **duplicates carefully**
- One of the most asked **array pair-sum** pattern questions in interviews
