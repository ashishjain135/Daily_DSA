## 🔥 Problem Statement:

Given an array of strings, group all anagrams together.

Strings inside each group must follow the order of their appearance.

### ✅ Example:

Input:

```
arduino
CopyEdit
arr[] = ["act", "god", "cat", "dog", "tac"]

```

Output:

```
css
CopyEdit
[["act", "cat", "tac"], ["god", "dog"]]

```

---

## 🔑 Key Concepts:

- **Anagrams**: Strings that contain same characters but in different order.
    - `"act"`, `"cat"`, `"tac"` → all anagrams because they have same characters.
- **Sorting a string** gives a unique signature to all its anagrams.
- Use **HashMap** (or `LinkedHashMap` in Java) to store:
    - Key → Sorted string
    - Value → List of original strings that match this anagram
- `LinkedHashMap` preserves insertion order of keys → solves "maintain order of appearance" requirement.

---

## 💡 Approach (Step-by-Step):

1️⃣ Initialize a HashMap (`LinkedHashMap`) → key: sorted string, value: list of strings.

2️⃣ Iterate over each string in the array.

3️⃣ For each string:

- Convert it into char array → sort → convert back to string → get sorted version.
- This sorted version will act as key.

4️⃣ Check if key exists in map:

- If not, create a new list.
- Add the original string into the corresponding list.

5️⃣ After processing all strings, collect all lists from map → output.

---

## 🔧 Java Code:

```java
java
CopyEdit
import java.util.*;

class Solution {
    public ArrayList<ArrayList<String>> anagrams(String[] arr) {
        Map<String, List<String>> map = new LinkedHashMap<>();

        for (String str : arr) {
            char[] chars = str.toCharArray();
            Arrays.sort(chars);
            String sorted = new String(chars);

            if (!map.containsKey(sorted)) {
                map.put(sorted, new ArrayList<>());
            }
            map.get(sorted).add(str);
        }

        ArrayList<ArrayList<String>> result = new ArrayList<>();
        for (List<String> group : map.values()) {
            result.add(new ArrayList<>(group));
        }
        return result;
    }
}

```

---

## 🧮 Time & Space Complexity:

| Complexity | Analysis |
| --- | --- |
| **Time** | O(N * M log M) |
| **Space** | O(N * M) |

Where:

- N = number of strings
- M = average length of strings
- Sorting each string takes O(M log M).

---

## ⚠️ Common Mistakes:

- Forgetting to preserve order → use `LinkedHashMap`.
- Type mismatch when converting `List<List<String>>` to `ArrayList<ArrayList<String>>`.
- Sorting issue: Not converting string properly before/after sorting.

---

## 🎯 Key Interview Points:

- Why sorting is used to detect anagrams?
- Why `LinkedHashMap` is better than `HashMap` here?
- How to convert nested collections safely in Java?
- Time complexity analysis.

---

## 🔍 Variations to Practice:

- Group anagrams but don't care about order.
- Return count of anagram groups.
- Anagram substring search in larger string.

---

# ✅ Quick Template for Java Interview:

```java
java
CopyEdit
char[] chars = str.toCharArray();
Arrays.sort(chars);
String sorted = new String(chars);

```

- This is your **standard signature extraction** for anagrams.

---

# 🔥 Short Summary:

**Sort the string → store into map → collect values → done.**

---

---
