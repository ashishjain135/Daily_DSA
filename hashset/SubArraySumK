# Day49 SubArraySumK

### **Subarrays with sum K**

Given an unsorted array of integers, find the number of subarrays having sum exactly equal to a given number¬†**k**.

**Examples:**

```
Input:arr = [10, 2, -2, -20, 10], k = -10
Output: 3
Explaination: Subarrays: arr[0...3], arr[1...4], arr[3...4] have sum exactly equal to -10.
```

## üîë **Brute Force Approach (Naive Solution):**

- **Approach:**
    - Generate all possible subarrays using 2 nested loops.
    - Calculate sum for each subarray.
    - If sum equals `k`, increase count.
- **Time Complexity:**
    - O(N¬≤)
- **Drawback:**
    - Slow for large arrays.

---

## üî• **Optimized Approach using Prefix Sum + HashMap**

### üéØ **Core Idea:**

- Use prefix sum technique.
- Store prefix sums in a hashmap with their frequencies.
- At each index, check if `(prefixSum - k)` exists in the hashmap.

### üîé **Mathematical Insight:**

> Subarray sum from i to j:
> 
> 
> `sum(i to j) = prefixSum[j] - prefixSum[i-1]`
> 

If:

`prefixSum[j] - prefixSum[i-1] == k`

Then:

`prefixSum[i-1] = prefixSum[j] - k`

üëâ Hence, check whether `(prefixSum - k)` exists.

---

### üìù **Algorithm Steps:**

1. Initialize:
    - `Map<Integer, Integer> prefixSumCount = new HashMap<>();`
    - `prefixSumCount.put(0, 1);` (for the case when prefixSum itself equals k)
    - `prefixSum = 0;`
    - `count = 0;`
2. Iterate over the array:
    - `prefixSum += arr[i]`
    - Check if `(prefixSum - k)` is present in map:
        - If yes, add its frequency to `count`.
    - Update prefixSumCount map:
        - `prefixSumCount.put(prefixSum, prefixSumCount.getOrDefault(prefixSum, 0) + 1);`
3. Return count.

---

### üßÆ **Dry Run Example:**

Given:

`arr = [10, 2, -2, -20, 10]`

`k = -10`

| i | arr[i] | prefixSum | prefixSum - k | map.get(prefixSum - k) | count | map |
| --- | --- | --- | --- | --- | --- | --- |
| 0 | 10 | 10 | 20 | 0 | 0 | {0=1, 10=1} |
| 1 | 2 | 12 | 22 | 0 | 0 | {0=1, 10=1, 12=1} |
| 2 | -2 | 10 | 20 | 0 | 0 | {0=1, 10=2, 12=1} |
| 3 | -20 | -10 | 0 | 1 | 1 | {0=1, 10=2, 12=1, -10=1} |
| 4 | 10 | 0 | 10 | 2 | 3 | {0=2, 10=2, 12=1, -10=1} |

**Final count = 3**

---

## üî• **Java Code:**

```java
java
CopyEdit
import java.util.*;

class Solution {
    public int subarraySum(int[] nums, int k) {
        Map<Integer, Integer> prefixSumCount = new HashMap<>();
        prefixSumCount.put(0, 1);

        int count = 0;
        int prefixSum = 0;

        for (int num : nums) {
            prefixSum += num;

            if (prefixSumCount.containsKey(prefixSum - k)) {
                count += prefixSumCount.get(prefixSum - k);
            }

            prefixSumCount.put(prefixSum, prefixSumCount.getOrDefault(prefixSum, 0) + 1);
        }

        return count;
    }
}

```

---

## ‚úÖ **Complexity Analysis:**

- **Time Complexity:** O(N)
- **Space Complexity:** O(N)

---

## üí° **Key Takeaways:**

- HashMap based prefix sum technique is very powerful for subarray problems.
- This approach works for negative, positive, and zero values.
- Must-know pattern for interviews (used in problems like: subarray sum divisible by k, longest subarray with sum k, etc.)

---

## ‚≠ê **Similar Problems for Practice:**

- Subarray sum divisible by K
- Longest subarray with sum K
- Count subarrays with product less than K
