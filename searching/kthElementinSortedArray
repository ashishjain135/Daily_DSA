Problem Statement
Given a sorted array arr[] of distinct positive integers, find the k-th positive integer that is missing from the array.

Example
java
Copy
Edit
Input: arr = [2, 3, 4, 7, 11], k = 5
Missing numbers = 1, 5, 6, 8, 9, 10, ...
5th missing number = 9

Input: arr = [1, 2, 3], k = 2
Missing numbers = 4, 5, 6, ...
2nd missing number = 5
Key Concepts
Missing number: A positive integer that does not appear in the given array.

The array is sorted and contains distinct positive integers.

We want to find the k-th missing number without explicitly listing all missing numbers (for efficiency).

Insight: Counting Missing Numbers Up to Each Element
For any index i in the array:

\text{missing_count_before_i} = arr[i] - (i + 1)
If there were no missing numbers, arr[i] should equal i + 1 (because the array would be [1, 2, 3, ...]).

The difference between arr[i] and (i+1) gives the count of missing numbers before arr[i].

Approach / Algorithm
Check if the k-th missing number is beyond the last element:

Missing numbers before last element = arr[n-1] - n.

If k is larger, the answer lies after the last element.

Calculate as:

k-th missing
=
𝑎
𝑟
𝑟
[
𝑛
−
1
]
+
(
𝑘
−
(
𝑎
𝑟
𝑟
[
𝑛
−
1
]
−
𝑛
)
)
k-th missing=arr[n−1]+(k−(arr[n−1]−n))
Otherwise, find the first index i where missing_count_before_i >= k:

This means the k-th missing number is between arr[i-1] and arr[i].

Calculate the exact missing number:

Let prevMissing = missing_count_before_{i-1} = arr[i-1] - i

Then:

k-th missing
=
𝑎
𝑟
𝑟
[
𝑖
−
1
]
+
(
𝑘
−
𝑝
𝑟
𝑒
𝑣
𝑀
𝑖
𝑠
𝑠
𝑖
𝑛
𝑔
)
k-th missing=arr[i−1]+(k−prevMissing)
Special case when i == 0 (missing before first element):

The k-th missing number is simply k.

Step-by-Step Example
For arr = [2, 3, 4, 7, 11] and k = 5:

i	arr[i]	missing_count_before_i = arr[i] - (i+1)
0	2	2 - 1 = 1
1	3	3 - 2 = 1
2	4	4 - 3 = 1
3	7	7 - 4 = 3
4	11	11 - 5 = 6

At i = 4, missing count is 6 ≥ k (5), so the kth missing is between arr[3] = 7 and arr[4] = 11.

Previous missing count: prevMissing = arr[3] - 4 = 7 - 4 = 3

Calculate kth missing:

7
+
(
5
−
3
)
=
7
+
2
=
9
7+(5−3)=7+2=9
Code Snippet (Java)
java
Copy
Edit
class Solution {
    public int kthMissing(int[] arr, int k) {
        int n = arr.length;

        if (k > arr[n - 1] - n) {
            return arr[n - 1] + (k - (arr[n - 1] - n));
        }

        for (int i = 0; i < n; i++) {
            int missingCount = arr[i] - (i + 1);

            if (missingCount >= k) {
                if (i == 0) {
                    return k;
                } else {
                    int prevMissing = arr[i - 1] - i;
                    return arr[i - 1] + (k - prevMissing);
                }
            }
        }

        return -1; // fallback
    }
}
Time Complexity
The solution runs in O(n) time where n is the length of the array.

Can be optimized to O(log n) using binary search on the missing counts.

Summary
The problem boils down to counting how many positive integers are missing up to any point.

Use the formula arr[i] - (i+1) to calculate missing counts.

Find where the kth missing number fits and calculate it efficiently without listing missing numbers.
