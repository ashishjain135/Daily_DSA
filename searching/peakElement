# Day31 PeakElement

## ðŸ“˜ **Topic: Peak Element in an Array**

---

### ðŸ”¹ **Problem Statement:**

Given an array `arr[]` where **no two adjacent elements are equal**, find the **index of any peak element**.

- An element `arr[i]` is a **peak** if:
    - `arr[i] > arr[i - 1]` and `arr[i] > arr[i + 1]`
    - For edge elements:
        - `arr[0]` is a peak if `arr[0] > arr[1]`
        - `arr[n - 1]` is a peak if `arr[n - 1] > arr[n - 2]`
- Assume: `arr[-1] = -âˆž` and `arr[n] = -âˆž`
- **Return the index** of **any one** peak.

---

## âœ… **1. Linear Search Approach â€“ O(n)**

### ðŸ’¡ Logic:

- Check each element to see if itâ€™s greater than its neighbors.
- Don't forget to check boundary elements.

### ðŸ”Ž Steps:

1. If array has only 1 element, return 0.
2. Check if the **first element** is a peak.
3. Check if the **last element** is a peak.
4. Loop from `i = 1` to `n - 2`:
    - If `arr[i - 1] < arr[i] > arr[i + 1]`, return `i`.

### ðŸ”¤ Java Code:

```java
java
CopyEdit
class Solution {
    public int peakElement(int[] arr) {
        int n = arr.length;

        if (n == 1) return 0;

        if (arr[0] > arr[1]) return 0;
        if (arr[n - 1] > arr[n - 2]) return n - 1;

        for (int i = 1; i < n - 1; i++) {
            if (arr[i - 1] < arr[i] && arr[i] > arr[i + 1]) {
                return i;
            }
        }

        return 0; // fallback (in case no peak found, though guaranteed)
    }
}

```

### ðŸ§  Notes:

- Safe and simple.
- Use when constraints are small.
- Easy to understand and debug.

---

## âœ… **2. Binary Search Approach â€“ O(log n)**

### ðŸ’¡ Logic:

- Use the slope of the array to eliminate half the array at every step.
- If `arr[mid] > arr[mid + 1]`, the peak lies **on the left**, else on the **right**.

### ðŸ”Ž Steps:

1. Initialize `low = 0`, `high = n - 1`.
2. While `low < high`:
    - Calculate `mid = (low + high) / 2`
    - If `arr[mid] > arr[mid + 1]`, then search in **left half**: `high = mid`
    - Else, search in **right half**: `low = mid + 1`
3. Return `low` or `high` (they both point to the same peak)

### ðŸ”¤ Java Code:

```java
java
CopyEdit
class Solution {
    public int peakElement(int[] arr) {
        int low = 0, high = arr.length - 1;

        while (low < high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] > arr[mid + 1]) {
                high = mid; // search left
            } else {
                low = mid + 1; // search right
            }
        }

        return low; // or high
    }
}

```

### ðŸ§  Notes:

- Much faster for large arrays.
- Uses the guarantee that **a peak always exists**.
- Make sure `arr[mid + 1]` is within bounds.

---

### ðŸ§¾ **Comparison Table:**
