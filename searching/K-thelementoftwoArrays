# Day32 kthSorted

# ✅ Revision Notes: K-th Element in Two Sorted Arrays

---

## 🔸 Problem Statement:

Given two sorted arrays `a[]` and `b[]`, and an integer `k`, find the **k-th element** in the merged sorted array of `a[]` and `b[]`.

---

## 🧠 Approaches

---

### 🟩 **Approach 1: Two Pointer Method (Naive Merge) – O(k)**

### ✅ **Logic:**

- Use two pointers to simulate the merge of both arrays.
- Move the pointers and track how many elements you've passed.
- Stop when you've reached the `k-th` element.

### 📋 **Code (Java):**

```java
java
CopyEdit
class Solution {
    public int kthElement(int a[], int b[], int k) {
        int i = 0, j = 0, count = 0;
        int ans = 0;

        while (i < a.length && j < b.length) {
            if (a[i] <= b[j]) {
                ans = a[i++];
            } else {
                ans = b[j++];
            }
            count++;
            if (count == k) return ans;
        }

        while (i < a.length) {
            ans = a[i++];
            count++;
            if (count == k) return ans;
        }

        while (j < b.length) {
            ans = b[j++];
            count++;
            if (count == k) return ans;
        }

        return -1; // invalid case
    }
}

```

### ⏱️ Time Complexity:

- **O(k)** → linear up to k steps

### 📦 Space Complexity:

- **O(1)**

---

### 🧠 When to Use:

- When **k is small** (e.g., `k <= 1e5`)
- When code simplicity is important

---

### 🔴 Weakness:

- Can be slow when `k` is large (e.g., close to 2 * 10⁶)

---

### 🔶 **Important Points to Remember:**

- Always check array bounds before accessing `a[i]` or `b[j]`.
- Use this method when constraints are loose or `k` is small.
- It simulates merge sort behavior.

---

### 🟩 **Approach 2: Optimal Binary Search – O(log(min(n, m)))**

### ✅ **Logic:**

- Use binary search on the **smaller array** to find a partition such that:
    
    ```
    lua
    CopyEdit
    max(leftA, leftB) <= min(rightA, rightB)
    and (leftA + leftB) == k
    
    ```
    

### 📋 **Code (Java):**

```java
java
CopyEdit
class Solution {
    public int kthElement(int a[], int b[], int k) {
        if (a.length > b.length) return kthElement(b, a, k);

        int n = a.length, m = b.length;
        int low = Math.max(0, k - m), high = Math.min(k, n);

        while (low <= high) {
            int cutA = (low + high) / 2;
            int cutB = k - cutA;

            int l1 = (cutA == 0) ? Integer.MIN_VALUE : a[cutA - 1];
            int l2 = (cutB == 0) ? Integer.MIN_VALUE : b[cutB - 1];
            int r1 = (cutA == n) ? Integer.MAX_VALUE : a[cutA];
            int r2 = (cutB == m) ? Integer.MAX_VALUE : b[cutB];

            if (l1 <= r2 && l2 <= r1) {
                return Math.max(l1, l2);
            } else if (l1 > r2) {
                high = cutA - 1;
            } else {
                low = cutA + 1;
            }
        }
        return 0;
    }
}

```

### ⏱️ Time Complexity:

- **O(log(min(n, m)))**

### 📦 Space Complexity:

- **O(1)**

---

### 🧠 When to Use:

- When `k` is large (e.g., 10⁶ or more)
- When you're optimizing for time
- During interviews — it's a **frequent question**

---

### ✅ Important Edge Cases:

- If `cutA == 0`, take `Integer.MIN_VALUE` as leftA
- If `cutA == n`, take `Integer.MAX_VALUE` as rightA
- Always binary search the **smaller array**

---

## ✅ Summary Comparison:

| Feature | Two Pointer (O(k)) | Binary Search (O(log min)) |
| --- | --- | --- |
| Time Complexity | O(k) | O(log(min(n, m))) |
| Space Complexity | O(1) | O(1) |
| Simplicity | ✅ Easy | ❌ Complex but Efficient |
| Good for Small `k` | ✅ Yes | ❌ Overkill |
| Good for Large `k` | ❌ Slow | ✅ Fast |
| Interview Friendly | ✅ Sometimes | ✅ Frequently Asked |

---

## 📝 Quick Tips to Remember:

- If you can **afford O(k)** steps → go with two-pointer approach.
- For **optimal solutions**, always **binary search the smaller array**.
- Use **`Integer.MIN_VALUE`/`MAX_VALUE`** to handle empty partitions in binary search.
- This problem is similar to the famous **“Median of Two Sorted Arrays”**, which is also solved using the binary search method.
